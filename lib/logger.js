'use strict';Object.defineProperty(exports,"__esModule",{value:true});exports.canClear=exports.canTrace=exports.canDebug=exports.canInfo=exports.canWarn=exports.canError=exports.canDir=exports.canLog=undefined;var _classCallCheck2=require('babel-runtime/helpers/classCallCheck');var _classCallCheck3=_interopRequireDefault(_classCallCheck2);var _createClass2=require('babel-runtime/helpers/createClass');var _createClass3=_interopRequireDefault(_createClass2);exports.logLevel=logLevel;var _chalk=require('chalk');var _chalk2=_interopRequireDefault(_chalk);var _logLevels=require('./log-levels');var LogLevels=_interopRequireWildcard(_logLevels);function _interopRequireWildcard(obj){if(obj&&obj.__esModule){return obj;}else{var newObj={};if(obj!=null){for(var key in obj){if(Object.prototype.hasOwnProperty.call(obj,key))newObj[key]=obj[key];}}newObj.default=obj;return newObj;}}function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}/* eslint no-console: "off" */function LOG(){/* no op */}function logLevel(){var _global=global,_global$LOG_LEVEL=_global.LOG_LEVEL,LOG_LEVEL=_global$LOG_LEVEL===undefined?LogLevels.INFO:_global$LOG_LEVEL;return LOG_LEVEL;}var canLog=exports.canLog=function canLog(){return logLevel()>=LogLevels.ALL;};var canDir=exports.canDir=function canDir(){return logLevel()>=LogLevels.ALL;};var canError=exports.canError=function canError(){return logLevel()>=LogLevels.ERROR;};var canWarn=exports.canWarn=function canWarn(){return logLevel()>=LogLevels.WARN;};var canInfo=exports.canInfo=function canInfo(){return logLevel()>=LogLevels.INFO;};var canDebug=exports.canDebug=function canDebug(){return logLevel()>=LogLevels.DEBUG;};var canTrace=exports.canTrace=function canTrace(){return logLevel()>=LogLevels.TRACE;};var canClear=exports.canClear=function canClear(){return logLevel()>=LogLevels.ALL;};function _log(){var _ref;for(var _len=arguments.length,args=Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}return(_ref=console.log||LOG).call.apply(_ref,[console].concat(args));}var _dir=function _dir(arg){return(console.dir||_log.bind(console,_chalk2.default.gray('[log]')))(arg);};var _error=function _error(){return(console.error||_log.bind(console,_chalk2.default.gray('[log]'))).apply(undefined,arguments);};var _warn=function _warn(){return(console.warn||_log.bind(console,_chalk2.default.gray('[log]'))).apply(undefined,arguments);};var _info=function _info(){return(console.info||_log.bind(console,_chalk2.default.gray('[log]'))).apply(undefined,arguments);};var _debug=function _debug(){return(console.debug||_log.bind(console,_chalk2.default.gray('[log]'))).apply(undefined,arguments);};var _trace=function _trace(){return(console.trace||_log.bind(console,_chalk2.default.gray('[log][trace]')))();};var _clear=function _clear(){return(console.clear||_log.bind(console,_chalk2.default.gray('[log][clear]')))();};var Logger=function(){function Logger(){(0,_classCallCheck3.default)(this,Logger);}(0,_createClass3.default)(Logger,null,[{key:'log',value:function log(){for(var _len2=arguments.length,args=Array(_len2),_key2=0;_key2<_len2;_key2++){args[_key2]=arguments[_key2];}if(canLog())_log.apply(undefined,[_chalk2.default.gray('[log]')].concat(args));}},{key:'dir',value:function dir(arg){if(canDir())_dir(arg);}},{key:'error',value:function error(){for(var _len3=arguments.length,args=Array(_len3),_key3=0;_key3<_len3;_key3++){args[_key3]=arguments[_key3];}if(canError())_error.apply(undefined,[_chalk2.default.red('[error]')].concat(args));}},{key:'warn',value:function warn(){for(var _len4=arguments.length,args=Array(_len4),_key4=0;_key4<_len4;_key4++){args[_key4]=arguments[_key4];}if(canWarn())_warn.apply(undefined,[_chalk2.default.yellow('[warn]')].concat(args));}},{key:'info',value:function info(){for(var _len5=arguments.length,args=Array(_len5),_key5=0;_key5<_len5;_key5++){args[_key5]=arguments[_key5];}if(canInfo())_info.apply(undefined,[_chalk2.default.gray('[info]')].concat(args));}},{key:'debug',value:function debug(){for(var _len6=arguments.length,args=Array(_len6),_key6=0;_key6<_len6;_key6++){args[_key6]=arguments[_key6];}if(canDebug())_debug.apply(undefined,[_chalk2.default.gray('[debug]')].concat(args));}},{key:'trace',value:function trace(){if(canTrace())_trace();}},{key:'clear',value:function clear(){if(canClear())_clear();}}]);return Logger;}();exports.default=Logger;